============
INTRODUCTION
============

These instructions serve as a quick reference for how to configure the JSON
message(JMSG) library and app tables for common use cases. These use cases
are run using the JMSG_DEMO app. The JMSG Demo and JMSG User App projects
contain complete documentation for using the JMSG facility and for writing
apps the have custom JMSG telemetry, respectively.

The JMSG facility provides a bridge between the software bus and external
systems. JMSGs are sent between the systems using either UDP or MQTT. The
term JMSG generically refers to a Basecamp JSON text message. 

The following JSMG tables need to be configured for each use case. These
tables are located in /cfs-basecamp/cfe-eds-framework/basecamp_defs/.
- cpu1_jmsg_topics.json
- cpu1_jmsg_udp_ini.json or cpu1_jmsg_mqtt_ini.json

The following use cases are covered:

1. UDP-to-Python: Raspberry Pi (RPI) Demo Messages
   - Interface to RPI python code that handles hardware interfaces

2. UDP-to-Python: Python Scripts
   - Manage execution of python scripts

3. MQTT Web Server: Discrete/Rate Messages
   - Use MQTT to communicate with remote systems 

4. UDP-to-Python: "HexText" Command & Telemetry Messages
   - Encode binary cFS messages in HexText messages so any EDS
     defined message can be sent/received in a JMSG


UDP and MQTT Configurations:

1. For UDP use cases the following two configuration files must agree. The defaults
   should be adequate.
   /cfs-basecamp/cfe-eds-framework/basecamp_defs/cpu1_jmsg_udp_ini.json (these should be the defaults)
   
      "RX_UDP_PORT":         8888,
      "TX_UDP_ADDR":         "127.0.0.1",
      "TX_UDP_PORT":         9999,

   /cfs-basecamp/usr/apps/jmsg_lib/scripts/jmsg_udp_ini.json (these should be the defaults)
      [NETWORK]
      CFS_IP_ADDR  = 127.0.0.1
      CFS_APP_PORT = 8888
      PY_APP_PORT  = 9999
      

2. For MQTT use cases the JMSG_MQTT app settings must match the MQTT broker settings you
   are using. To use the EMQX MTTQX webclient at https://mqttx.app/web-client#/recent_connections  
   /cfs-basecamp/cfe-eds-framework/basecamp_defs/cpu1_jmsg_mqtt_ini.json should have the
   following settings:
   
      "MQTT_BROKER_PORT":     1883,
      "MQTT_BROKER_ADDRESS":  "broker.emqx.io",

cFS Target Configuration Notes:
       
1. The JMSG Demo Project should be used to ensure the cFS target is configured
   properly.
   - JMSG_LIB, JMSG_APP, JMSG_UDP, JMSG_MQTT and JMSG_DEMO installed in cFS target
   - KIT_TO KIT_TO's packet filter table includes all JMSG topics
   - 'make topicids' run to populate message topic IDs in JSON tables

2. Only one topic array entry can be enabled and configured as MQTT with a
   publish sb-role.  This is because MQTT_LIB only supports one MQTT topic
   subscription.

3. The JMSG_UDP and JMSG_MQTT status telemetry pages can be open so you can see
   transmit and receive counters incrementing as expected. 

4. Debug event messages can be enabled for JMSG_* apps if you'd like to see more
   details of the processing. 


===============================================================================
Use Case Sequence Diagram Template
===============================================================================

The Python program /cfs-basecamp/usr/apps/jmsg_lib/scripts/jmsg_demo.py is used
to communicate with JMSG_DEMO via the JMSG Facility and must be run in its own
terminal window. It has two threads of execution, one to receive JMSGs over UDP 
from the JMSG Facility and one to send JMSG's over UDP to the JMSG Facility. 

The diagram below shows JMSG flows. The ==> arrows indicate software bus
communication and the --> arrows indicate UDP communication. JMSG_DEMO's 
StartUseCase command (indicated by <Start>) initiates the flow of period
messages from JSMG_DEMO. When the user presses <Enter> in the python terminal
window a single message is sent. 



    JMSG_DEMO                     JMSG
       APP                      Facility                    jmsg_demo.py
        |                           |                            |
        |   JMSG_LIB_CSV_CMD        |   JMSG(use case payload)   |
<Start> | ========================> o -------------------------> |
        |                           |                            |
        |                           |                            |
        |   JMSG_LIB_CSV_TLM        |   JMSG(use case payload)   |
        | <======================== o <------------------------- | <Enter>
        |                           |                            |
        |                           |                            |
        

===============================================================================
1. UDP-to-Python Process: Raspberry Pi (RPI) Demo Messages
===============================================================================
Use the RPI Demo message to illustrate sending commands with CSV parameters and
receiving telemetry with CSV parameters. 

                                  JMSG
     JMSG_DEMO                   Facility                     Python App
        |                           |                            |
        |   JMSG_LIB_CSV_CMD        |   JMSG(RPI demo payload)   |
<Start> | ========================> o -------------------------> |
        |                           |                            |
        |                           |                            |
        |   JMSG_LIB_CSV_TLM        |   JMSG(RPI demo payload)   |
        | <======================== o <------------------------- | <Enter>
        |                           |                            |
        |                           |                            |

A. Set jmsg_topics.json configurations:

/cfs-basecamp/cfe-eds-framework/basecamp_defs/cpu1_jmsg_topics.json (other entries should be disabled)

   "topic-id-map": { 
      "JMSG_LIB_TOPIC_CSV_CMD_TOPICID": "cfe-4",
      "JMSG_LIB_TOPIC_CSV_TLM_TOPICID": "cfe-5",
   }

   "topic": [   
       {
          "id": "CSV_CMD",
          "name":  "basecamp/csv/cmd",
          "cfe-4": **,
          "cfe": **,
          "protocol": "udp",
          "sb-role": "sub",
          "enabled": "true"
       },
       {
          "id": "CSV_TLM",
          "name":  "basecamp/csv/tlm",
          "cfe-5": **,
          "cfe": **,
          "protocol": "udp",
          "sb-role": "pub",
          "enabled": "true"
       },
   ]

** Value populated by "make topicids" 

B. Build the cFS using 'make topicids', start Basecamp and start the cFS. 

C. In a new terminal window run 'python3 jmsg_demo.py'

D. From Basecamp GUI issue a JMSG_DEMO StartUseCase->UDP_RPI command. You should
   repeatedly see something close to:
   Received from ('127.0.0.1', 33648) JMSG 1024: basecamp/csv/cmd:{"name": "UDP RPI", "parameters": "rate-x,0.17453,rate-y,0.00000,rate-z,0.00000,lux,8"}

E. From Basecamp open the following telemetry pages and the RPI Demo payload
   contents should be displayed
   - JMSG_LIB/Application/TOPIC_CSV_CMD 
   - JMSG_DEMO/Application/UDP_RPI_TLM 

F. In the python terminal window hit <Enter> to send a RPI demo message. You should
   see the TOPIC_CSV_CMD telemetry page update and the ParamText payload containing
   the RPI Demo CSV telemetry.

G. Open Basecamp's JMSG_UDP/Application/STATUS_TLM telemetry page to verify the 
   TxUdpMsgCnt is incrementing and the RxUdpMsgCnt equals the number of times you
   hit <Enter> in the Python terminal window.

===============================================================================
2. UDP-to-Python: Python Scripts
===============================================================================
Send a python script embedded in the JMSG to be executed or send a command to
execute a command on the python system.

                                  JMSG
     JMSG_DEMO                   Facility                     Python App
        |                           |                            |
        |   JMSG_LIB_SCRIPT_CMD     |   JMSG(Python script)      |
<Start> | ========================> o -------------------------> |
        |                           |                            |
        |                           |                            |

A. Set jmsg_topics.json configurations:

/cfs-basecamp/cfe-eds-framework/basecamp_defs/cpu1_jmsg_topics.json (other entries should be disabled)

   "topic-id-map": { 
      "JMSG_LIB_TOPIC_CSV_CMD_TOPICID": "cfe-4",
   }

   "topic": [   
       {
          "id": "SCRIPT_CMD",
          "name":  "basecamp/script/cmd",
          "cfe-5": **,
          "cfe": **,
          "protocol": "udp",
          "sb-role": "sub",
          "enabled": "true"
       },
   ]

** Value populated by "make topicids" 

B. Build the cFS using 'make topicids', start Basecamp and start the cFS. 

C. In a new terminal window run 'python3 jmsg_demo.py'

D. From Basecamp GUI issue a JMSG_DEMO StartUseCase->UDP_SCRIPT command and
   you should repeatedly see the following messages in the python terminal:

   Received from ('127.0.0.1', 46860) JMSG 1024: basecamp/script/cmd:{"command": 1, "script-file": "Unused", "script-text": "print('Hello World')\nprint('Hello Universe')"}

   Hello World
   Hello Universe


===============================================================================
3.  MQTT Web Server: Discrete/Rate Messages
===============================================================================
Use JMSG_DEMO's discrete message to illustrate how JSON messages can be
transmitted between a cFS target and an MQTT broker using a websocket. The same
instructions apply to rate messages by replacing Discrete with Rate.

                                  JMSG                              MQTT 
     JMSG_DEMO                   Facility                         WebSocket
        |                           |                                 |
        |   JMSG_LIB_CSV_CMD        |   JSON(Discrete/Rate payload)   |
<Start> | ========================> o ------------------------------> |
        |                           |                                 |
        |                           |                                 |
        |   JMSG_LIB_CSV_TLM        |   JSON(Discrete/Rate payload)   |
        | <======================== o <------------------------------ | <Send>
        |                           |                                 |
        |                           |                                 |

A. Set jmsg_topics.json configurations:

/cfs-basecamp/cfe-eds-framework/basecamp_defs/cpu1_jmsg_topics.json (other entries should be disabled)

   "topic-id-map": { 
      "JMSG_LIB_TOPIC_CSV_CMD_TOPICID": "cfe-4",
      "JMSG_LIB_TOPIC_CSV_TLM_TOPICID": "cfe-5",
   }

   "topic": [   
       {
          "id": "CSV_CMD",
          "name":  "basecamp/csv/cmd",
          "cfe-4": **,
          "cfe": **,
          "protocol": "mqtt",
          "sb-role": "sub",
          "enabled": "true"
       },
       {
          "id": "CSV_TLM",
          "name":  "basecamp/csv/tlm",
          "cfe-5": **,
          "cfe": **,
          "protocol": "mqtt",
          "sb-role": "pub",
          "enabled": "true"
       },
   ]

** Value populated by "make topicids" 

B. Build the cFS using 'make topicids', start Basecamp and start the cFS. 

C. On your browser goto https://mqttx.app/web-client#/recent_connections
   - Fill in the Name field and click on the Connect button
   - Click the +Subscription button and enter 'basecamp/csv/cmd' (without quotes)   
   
D. From Basecamp GUI issue a JMSG_DEMO StartUseCase->MQTT_DISCRETE command. On the
   MQTT web page you should repeatedly see messages:
   {"name": "MQTT Discrete", "parameters": "item-1,0,item-2,0,item-3,1,item-4,0"}

   If you don't see messages try sending the JMSG_MQTT->ReconnectToBroker command

E. From Basecamp open the following telemetry pages and the Discrete payload
   contents should be displayed
   - JMSG_LIB/Application/TOPIC_CSV_CMD 
   - JMSG_DEMO/Application/MQTT_DISCRETE_TLM   

*. Open Basecamp's JMSG_MQTT/Application/STATUS_TLM telemetry page to verify
   the TxUdpMsgCnt is incrementing and the RxUdpMsgCnt equlas the number of times
   you hit <Enter> in the Python terminal window.
   
   
===============================================================================
4. UDP-to-Python: "HexText" Command & Telemetry Messages
===============================================================================
4. UDP-to-Python: "HexText" Message
   - Encode binary cFS messages in HexText messages so any EDS defined message
     can be sent/received in a JMSG
The Python program jmsg_cmd_tlm.py is used to communicate with JMSG_UDP.

KIT_TO                                             Python App
   |                                                   |
   |    Forward telemetry message encoded in hextext   |
   | ------------------------------------------------> |
   |                                                   |
   
A. Configure cpu1_jmsg_topics.json as follows(other entries should be disabled):

   "topic-id-map": { 
   
      "KIT_TO_SUB_WRAPPED_TLM_TOPICID": "cfe-1",
      "KIT_TO_PUB_WRAPPED_TLM_TOPICID": "cfe-2",

   },
   
   "topic": [
       {
          "name":  "basecamp/cfs/cmd",
          "cfe-1": 0,
          "cfe": 0,
          "protocol": "udp",
          "sb-role": "pub",
          "enabled": "true"
       },
       {
          "name":  "basecamp/cfs/tlm",
          "cfe-2": 0,
          "cfe": 0,
          "protocol": "udp",
          "sb-role": "sub",
          "enabled": "true"
       },

B. In cpu1_kit_to_pkt_tbl.json set the "forward" field to 'true' for a
   telemetry packet that is periodically produced. This example uses 
   JMSG_UDP's status message that is sent every 2 seconds.
   
      {"packet": {
         "name": "JMSG_UDP_STATUS_TLM_TOPICID",
         "topic-id-55": 0,
         "topic-id": 0,
         "forward": true,
         "priority": 0,
         "reliability": 0,
         "buf-limit": 4,
         "filter": { "type": 2, "X": 1, "N": 1, "O": 0}
      }},
      
C. Build the cFS using 'make topicids', start Basecamp and start the
   cFS. Opening JMSG_UDP's status telemetry message is also helpful
   so you can verify message counters are incrementing as expected.

D. In a new terminal window start navigate to jmsg_lib/fsw/topic_plugins
   and run 'python3 jmsg_cmd_tlm.py'

E. In the Basecamp "cFS Target Process Window" you should see APP_C_DEMO
   event messages and JMSG_UDP cmd & tlm plugin status messages.

F. In the Python terminal window you should repeatedly see these messages.
   The received values won't be exactly the same.
   
>>> Sending message basecamp/cfs/cmd:185cc0000001007a
Received from ('127.0.0.1', 56742) jmsg size=1024: basecamp/cfs/tlm:00017A0003007C023900000030CC0F005CEE000000000000010000006B420000000000006B42000000000000010000007B420000000000007B42000000000000





===============================================================================
===============================================================================
This section contains instructions for configuring User Topic Plugins for the
RPI demo and the discrete/rate web topics. These topics plugins still exist but
they have also been implemnted using the much simpler CSV JMSGs.    
===============================================================================
===============================================================================

These instructions assume JMSG_LIB, JMSG_APP and JMSG_MQTT/UDP have been
integrated with the cFS target. The JMSG topic table cpu1_jmsg_topics.json
is located in /cfs-basecamp/cfe-eds-framework/basecamp_defs/ and the
default user plugins defined in ../jmsg_lib/eds/usr_tplug.xml have not been
modified so the following topic table cfe entries correspond with these
USR_TPLUGG IDs:
   cfe-4 = USR1
   cfe-5 = USR2
   cfe-6 = USR3

===============================================================================
1. Configure & verify the RPI Demo topic plugin using JMSG_UDP (software)
===============================================================================

The Python program tplug_rpi_sim.py is used to communicate with JMSG_UDP.

JMSG_UDP                                                Python App
   |                                                        |
   |    'basecamp/rpi/demo:' topic, JSON demo payload       |
   | <----------------------------------------------------- |
   |    cfe-6(USR_4) pub SB RPI demo message                |
   | =======================================>               |
   |                                                        |
   |    cfe-5(USR_5) receives(sub) SB RPI demo message      |
   | <================================================      |
   |    'basecamp/rpi/demo:' topic, JSON demo payload       |
   | ------------------------------------------------------ |
   |                                                        |


A. Configure cpu1_jmsg_topics.json as follows(other entries should be disabled):

Configure the TPLUG_WEB_* entries as follows:

   "topic-id-map": { 
      "TPLUG_RPI_DEMO_PLUGIN_TLM_TOPICID": "cfe-5",
      "TPLUG_RPI_DEMO_PLUGIN_TLM_TOPICID": "cfe-6",
   }

   "topic": [   
       {
          "name":  "basecamp/rpi/demo",
          "cfe-5": 0,
          "cfe": 0,
          "protocol": "udp",
          "sb-role": "sub",
          "enabled": "true"
       },
       {
          "name":  "basecamp/rpi/demo",
          "cfe-6": 0,
          "cfe": 0,
          "protocol": "udp",
          "sb-role": "pub",
          "enabled": "true"
       },
   ]

B. Build the cFS using 'make topicids', start Basecamp and start the
   cFS. Opening JMSG_UDP's status telemetry message is also helpful 
   so you can verify message counters are incrementing as expected.
   Open the USR_TPLUG RPI_DEMO to see the SB published messages.

C. In a new terminal window start navigate to jmsg_lib/fsw/usr_tplugs
   and run 'python3 tplug_rpi_sim.py'

D. In the Python terminal window you should repeatedly see these messages.
      
>>> Sending message basecamp/rpi/demo:{"rpi-demo":{"rate-x": 9.000000, "rate-y": 18.000000, "rate-z": 27.000000, "lux": 9}}
Received from ('127.0.0.1', 48699) jmsg size=1024: basecamp/rpi/demo:{"rpi-demo":{"rate-x": 9.000000,"rate-y": 18.000000,"rate-z": 27.000000,"lux": 9}}

E. In Basecamp the USR_TPLUG RPI_DEMO telemetry screen should update and
   the valid Rx and Tx counters in JMSG_UDP's Status telemetry should increment.


===============================================================================
3. Configure & verify the RPI Demo topic plugin using JMSG_UDP (hardware)
===============================================================================

This must be run on a Raspberry Pi using the hardware described in the Python
program tplug_rpi_demo.py. tplug_rpi_demo.py is used to communicate with
JMSG_UDP. This configuration is a subset of the software simulation configuration. 

JMSG_UDP                                                Python App
   |                                                        |
   |    'basecamp/rpi/demo:' topic, JSON demo payload       |
   | <----------------------------------------------------- |
   |    cfe-6(USR_4) pub SB RPI demo message                |
   | =======================================>               |
   |                                                        |


A. Configure cpu1_jmsg_topics.json as follows(other entries should be disabled):

Configure the TPLUG_WEB_* entries as follows:

   "topic-id-map": { 
      "TPLUG_RPI_DEMO_PLUGIN_TLM_TOPICID": "cfe-5",
   }

   "topic": [   
       {
          "name":  "basecamp/rpi/demo",
          "cfe-5": 0,
          "cfe": 0,
          "protocol": "udp",
          "sb-role": "sub",
          "enabled": "true"
       },
   ]

B. Build the cFS using 'make topicids', start Basecamp and start the
   cFS. Opening JMSG_UDP's status telemetry message is also helpful
   so you can verify message counters are incrementing as expected.
   Open the USR_TPLUG RPI_DEMO to see the SB published messages.

C. In a new terminal window start navigate to jmsg_lib/fsw/usr_tplugs
   and run 'python3 tplug_rpi_demo.py'

D. In the Python terminal window you should repeatedly see these messages.
   The '#' should contain values read from the hardware.

Received from ('127.0.0.1', 48699) jmsg size=1024: basecamp/rpi/demo:{"rpi-demo":{"rate-x": #.###,"rate-y": #.###,"rate-z": #.###,"lux": #}}

E. In Basecamp the USR_TPLUG RPI_DEMO telemetry screen should update and
   the valid Rx and Tx counters in JMSG_UDP's Status telemetry should increment.


===============================================================================
4. Configure & verify the discrete & rate web topic plugins using JMSG_MQTT
===============================================================================

The Python program tplug_rpi_sim.py is used to communicate with JMSG_UDP.

JMSG_MQTT                                            HiveMQ
   |                                                   |
   |  'basecamp/demo/sc/discrete' topic, JSON payload  |
   | <------------------------------------------------ |
   |    cfe-3(USR_1) pub SB discrete message           |
   | ========================================>         |
   |                                                   |
   |  Run JMSG_APP's StartTopicTest USR_2(cfe-4)       |
   |  'basecamp/demo/sc/discrete' topic, JSON payload  |
   | ------------------------------------------------> |
   |                                                   |


A. Configure cpu1_jmsg_topics.json as follows(other entries should be disabled):

   "topic-id-map": { 
      "TPLUG_WEB_DISCRETE_PLUGIN_TLM_TOPICID": "cfe-3",
      "TPLUG_WEB_RATE_PLUGIN_TLM_TOPICID": "cfe-4",
   }

   "topic": [   
      {
          "name":  "basecamp/demo/sc/discrete",
          "cfe-3": 0,
          "cfe": 0,
          "protocol": "mqtt",
          "sb-role": "pub",
          "enabled": "true"
      },
          
      {
          "name":  "basecamp/demo/sc/rate",
          "cfe-4": 0,
          "cfe": 0,
          "protocol": "mqtt",
          "sb-role": "sub",
          "enabled": "true"
      }
   ]

B. Build the cFS using 'make topicids', start Basecamp and start
   the cFS. Open JMSG_MQTT's status telemetry message so you can
   verify message counters are incrementing as expected. Open the
   USR_TPLUG WEB_DISCRETE and USR_TPLUG WEB_DISCRETE telemetry pages 

C. Open the HiveMQ's websocket at https://www.hivemq.com/demos/websocket-client/?
   Using HiveMQ assumes Basecamps defaults have not been changed.

   - Connect the MQTT broker and publish 
     Topic: basecamp/demo/sc/discrete  
     Message: {"integer":{"item-1": 1,"item-2": 2,"item-3": 3,"item-4": 4}}
   - The USR_TPLUG WEB_DISCRETE telemetry page should be filled in and
     MSG_MQTT Status's ValidMqttMsgCnt should increment by 1

D. From Basecamp issue a JMSG_APP StartTopicTest(USR_2) command 

   - The USR_TPLUG WEB_RATE telemetry page should update and
     MSG_MQTT Status's ValidSbMsgCnt should increment


