============
INTRODUCTION
============

These instructions describe how to use JSON message (JMSG) topic plugins for
the JMSG_UDP and JMSG_MQTT apps. The term JMSG generically refers to a Basecamp
JSON text message. The UDP and MQTT JSON message conventions are nearly identical
and are based on the MQTT standard. Each message has a topic name that uses the
MQTT path standard. Basecamp's UDP topics have a colon appended to the end
of the topic name to serve as a delimeter between the topic name and JSON
payload. Text strings are used as payloads for both UDP and MQTT are JSON objects.
Typically JSON objects are used for the text and the content structure matches
as EDS structure definition used for the binary message. The exceptions to JSON
are the generic command and telemetry topic plugins provided with JMSG_LIB. They
encode and decode binary messages using "hextext".

The design supports using either JSMG_MQTT or JSMG_UDP seperately or intalling
both apps. JMSG_LIB and JMSG_APP must be installed to use JMSGs. See the JMSG_LIB
documentation for more details.

These instructions are a quick reference for the following material:

1. Configure & verify the cmd & tlm topic plugins using JMSG_UDP
2. Configure & verify the RPI Demo topic plugin using JMSG_UDP
3. Configure & verify the web discrete & rate topic plugins using JMSG_MQTT
4. Add a new topic plugin

These instructions assume JMSG_LIB, JMSG_APP and JMSG_MQTT/UDP have been
integrated with the cFS target. The JMSG topic table cpu1_jmsg_topics.json
is located in /cfs-basecamp/cfe-eds-framework/basecamp_defs/ and the
default user plugins defined in ../jmsg_lib/eds/usr_tplug.xml has not been
modified so the following topic table cfe entries correspond with these
USR_TPLUGG IDs:
   cfe-3 = USR1
   cfe-4 = USR2
   cfe-5 = USR3
   cfe-6 = USR4

Note only one topic array entry can be enabled and configured as MQTT
with a publish sb-role.  This is because MQTT_LIB only supports one
MQTT topic subscription.

'make topicids' must after the JMSG library and apps are installed so the 
TOPICID values are populated.

JMSG_MQTT and JMSG_UDP debug event messages can be enabled if you'd like to
see more details of the processing. 

===============================================================================
1. Configure & verify the cmd & tlm topic plugins using JMSG_UDP
===============================================================================

The Python program jmsg_cmd_tlm.py is used to communicate with JMSG_UDP.

JMSG_UDP                                           Python App
   |                                                   |
   |    APP_C_DEMO NOOP command encoded in hextext     |
   | <------------------------------------------------ |
   |                                                   |

KIT_TO                                             Python App
   |                                                   |
   |    Forward telemetry message encoded in hextext   |
   | ------------------------------------------------> |
   |                                                   |
   
A. Configure cpu1_jmsg_topics.json as follows(other entries should be disabled):

   "topic-id-map": { 
   
      "KIT_TO_SUB_WRAPPED_TLM_TOPICID": "cfe-1",
      "KIT_TO_PUB_WRAPPED_TLM_TOPICID": "cfe-2",

   },
   
   "topic": [
       {
          "name":  "basecamp/cfs/cmd",
          "cfe-1": 2145,
          "cfe": 2145,
          "protocol": "udp",
          "sb-role": "pub",
          "enabled": "true"
       },
       {
          "name":  "basecamp/cfs/tlm",
          "cfe-2": 2146,
          "cfe": 2146,
          "protocol": "udp",
          "sb-role": "sub",
          "enabled": "true"
       },

B. In cpu1_kit_to_pkt_tbl.json set the "forward" field to 'true' for a
   telemetry packet that is periodcially produced. This example uses 
   JMSG_UDP's status message that is sent every 2 seconds.
   
      {"packet": {
         "name": "JMSG_UDP_STATUS_TLM_TOPICID",
         "topic-id-55": 2170,
         "topic-id": 2170,
         "forward": true,
         "priority": 0,
         "reliability": 0,
         "buf-limit": 4,
         "filter": { "type": 2, "X": 1, "N": 1, "O": 0}
      }},
      
B. Compile the cFS, start Basecamp and start the cFS. Opening JMSG_UDP's
   status telemetry message is also helpful so you can verify message
   counters are incrementing as as expected.

c. In a new terminal window start navigate to jmsg_lib/fsw/topic_plugins
   and run 'python3 jmsg_cmd_tlm.py'

D. In the Basecamp "cFS Target Process Window" you should see APP_C_DEMO
   event messages and JMSG_UDP cmd & tlm plugin status messages.

E. In the Python terminal window you should repeatedly see these messages.
   The received values won't be exactly the same.
   
>>> Sending message basecamp/cfs/cmd:185cc0000001007a
Received from ('127.0.0.1', 56742) jmsg size=1024: basecamp/cfs/tlm:00017A0003007C023900000030CC0F005CEE000000000000010000006B420000000000006B42000000000000010000007B420000000000007B42000000000000


===============================================================================
2. Configure & verify the RPI Demo topic plugin using JMSG_UDP
===============================================================================

The Python program tplug_rpi_sim.py is used to communicate with JMSG_UDP.

JMSG_UDP                                                Python App
   |                                                        |
   |    'basecamp/rpi/demo:' topic, JSON demo payload       |
   | <----------------------------------------------------- |
   |    cfe-6(USR_4) pub SB RPI demo message                |
   | =======================================>               |
   |                                                        |
   |    cfe-5(USR_5) receives(sub) SB RPI demo message      |
   | <================================================      |
   |    'basecamp/rpi/demo:' topic, JSON demo payload       |
   | ------------------------------------------------------ |
   |                                                        |


A. Configure cpu1_jmsg_topics.json as follows(other entries should be disabled):

Configure the TPLUG_WEB_* entries as follows:

   "topic-id-map": { 
      "TPLUG_RPI_DEMO_PLUGIN_TLM_TOPICID": "cfe-5",
      "TPLUG_RPI_DEMO_PLUGIN_TLM_TOPICID": "cfe-6",
   }

   "topic": [   
       {
          "name":  "basecamp/rpi/demo",
          "cfe-5": 2174,
          "cfe": 2174,
          "protocol": "udp",
          "sb-role": "sub",
          "enabled": "true"
       },
       {
          "name":  "basecamp/rpi/demo",
          "cfe-6": 2174,
          "cfe": 2174,
          "protocol": "udp",
          "sb-role": "pub",
          "enabled": "true"
       },
   ]

B. Compile the cFS, start Basecamp and start the cFS. Opening JMSG_UDP's
   status telemetry message is also helpful so you can verify message
   counters are incrementing as as expected. Open the USR_TPLUG RPI_DEMO
   to see the SB published messages.

C. In a new terminal window start navigate to jmsg_lib/fsw/usr_tplugs
   and run 'python3 tplug_rpi_sim.py'

D. In the Python terminal window you should repeatedly see these messages.
      
>>> Sending message basecamp/rpi/demo:{"rpi-demo":{"rate-x": 9.000000, "rate-y": 18.000000, "rate-z": 27.000000, "lux": 9}}
Received from ('127.0.0.1', 48699) jmsg size=1024: basecamp/rpi/demo:{"rpi-demo":{"rate-x": 9.000000,"rate-y": 18.000000,"rate-z": 27.000000,"lux": 9}}

E. In Basecamp the USR_TPLUG RPI_DEMO telemetry screen should update and
   the valid Rx and Tx counters in JMSG_UDP's Status telemetry should increment 


===============================================================================
3. Configure & verify the discrete & rate web topic plugins using JMSG_MQTT
===============================================================================

The Python program tplug_rpi_sim.py is used to communicate with JMSG_UDP.

JMSG_MQTT                                            HiveMQ
   |                                                   |
   |  'basecamp/demo/sc/discrete' topic, JSON payload  |
   | <------------------------------------------------ |
   |    cfe-3(USR_1) pub SB discreete message          |
   | ========================================>         |
   |                                                   |
   |  Run cfe-4(USR_2) topic test                      |
   |  'basecamp/demo/sc/discrete' topic, JSON payload  |
   | ------------------------------------------------> |
   |                                                   |


A. Configure cpu1_jmsg_topics.json as follows(other entries should be disabled):

   "topic-id-map": { 
      "TPLUG_WEB_DISCRETE_PLUGIN_TLM_TOPICID": "cfe-3",
      "TPLUG_WEB_RATE_PLUGIN_TLM_TOPICID": "cfe-4",
   }

   "topic": [   
      {
          "name":  "basecamp/demo/sc/discrete",
          "cfe-3": 0,
          "cfe": 0,
          "protocol": "mqtt",
          "sb-role": "pub",
          "enabled": "true"
      },
          
      {
          "name":  "basecamp/demo/sc/rate",
          "cfe-4": 0,
          "cfe": 0,
          "protocol": "mqtt",
          "sb-role": "sub",
          "enabled": "true"
      }
   ]

B. Compile the cFS, start Basecamp and start the cFS. Open JMSG_MQTT's
   status telemetry message so you can verify message counters are
   incrementing as as expected. Open the USR_TPLUG WEB_DISCRETE
   and USR_TPLUG WEB_DISCRETE telemetry pages 

C. Open the HiveMQ's websocket at https://www.hivemq.com/demos/websocket-client/?
   Using HiveMQ assumes Basecamps defaults have not been changed.

   - Connect the MQTT broker and publish 
     Topic: basecamp/demo/sc/discrete  
     Message: {"integer":{"item-1": 1,"item-2": 2,"item-3": 3,"item-4": 4}}
   - The USR_TPLUG WEB_DISCRETE telemetry page should be filled in and
     MSG_MQTT Status's ValidMqttMsgCnt should increment by 1

D. From Basecamp issue a JMSG_APP StartTopicTest(USR_2) command 

   - The USR_TPLUG WEB_RATE telemetry page should update and
     MSG_MQTT Status's ValidSbMsgCnt should increment


===============================================================================
4. Add new topic plugin
===============================================================================

adding an MQTT topic plugin. Topic plugins 
define functions for converting between MQTT messages and cFE SB messages.
- The MQTT_GW app is typically located in cfs-basecamp/usr/apps/
- [app] is your user app name. SC_SIM is commented out in MQTT files to
  serve as an example
- It is recommended to place app MQTT plugin in files in fsw/mqtt and include
  a file named mqtt_install.txt that explains how to install the app's plugin
  from the app's perspective
- In cfs-basecamp/cfe-eds-framework/basecamp_defs/cpu1_mqtt_gw_ini.json make
  sure the "MQTT_BROKER" configurations match your situation
  
  
#################################################
App plugin creation steps. See MQTT_GW app docs
for a more detailed explanation. SC_SIM provides
a working example that can serve as a reference.
#################################################

1. Create a fsw/mqtt subdirectory in your app's repo
2. For each topic create a header file that
   - Includes "mqtt_gw_topic_plugins.h"
   - Defines event IDs based on MQTT_GW_TOPIC_#_BASE_EID
   - Defines an object class type [APP]_MQTT_TOPIC_CMD_Class_t 
   - Defines a global constructor function
3. For each topic create a source file that defines
   - A cFE SB message to JSON message converter
   - A JSON message to cFE SB message converter
   - A test function
 
 
#################################################
App plugin creation steps. See MQTT_GW app docs
for a more detailed explanation
#################################################

1. Add the following lines to mqtt_gw/CMakeLists.txt.

   include_directories(${[app]_MISSION_DIR}/fsw/mqtt)
   aux_source_directory(${[app]_MISSION_DIR}/fsw/mqtt APP_SRC_FILES)


2. Update the following sections in mqtt_gw/fsw/topic_plugins/mqtt_gw_topic_plugins.c.
   Each constructor is added to an MQTT_GW_PluginTopic_# where # is the
   plugin identifier. 

   - In the "Include files" section add
   
     #include "[app_name]_mqtt_topic_[topic_name].h"

   - In "Global File Data" declare topic plugin data
     
     static [APP_NAME]_MQTT_TOPIC_[TOPIC_NAME]_Class_t  [AppName]Topic[TopicName];

   - In MQTT_GW_TOPIC_PLUGIN_Constructor() add a call to your app's plugin
     constructor in the plugin topic switch statement.
     
     [APP_NAME]_MQTT_TOPIC_[TOPIC_NAME]_Constructor(&[AppName]Topic[TopicName], &PluginFuncTbl[i],
                                                    CFE_SB_ValueToMsgId(TopicTbl->Topic[i].Cfe));

3. In your app's plugin header file [app_name]_mqtt_topic_[topic_name].h, ensure your
   MQTT_GW_TOPIC_PLUGIN_#_BASE_EID identfier # matches the ID used in step 1
   
4. Add your plugin to cfs-basecamp/cfe-eds-framework/basecamp_defs/cpu1_mqtt_gw_topics.json. This 
   file contains detailed instructions

    {
       "mqtt":  "basecamp/[app_name]/[topic_name]",
       "cfe-#": 0,
       "cfe": 0,
       "sb-role": "pub",
       "enabled": "false"
    }

KIT_TO packet filter table

 