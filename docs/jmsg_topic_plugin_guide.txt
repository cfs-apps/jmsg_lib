============
INTRODUCTION
============

These instructions describe how to use JSON message (JMSG) topic plugins for
the JMSG_UDP and JMSG_MQTT apps. The term JMSG generically refers to a Basecamp
JSON text message. The UDP and MQTT JSON message conventions are nearly identical
and are based on the MQTT standard. Each message has a topic name that uses the
MQTT path standard. Basecamp's UDP topics have a colon appended to the end
of the topic name to serve as a delimeter between the topic name and JSON
payload. The payloads for botH UDP and MQTT are JSON objects.

The design supports using either JSMG_MQTT or JSMG_UDP seperately or intalling
both apps. JMSG_LIB and JMSG_APP must be installed to use JMSGs. See the JMSG_LIB
documentation for different use cases.

These instructions are a quick reference for the following material:

1. Configure & verify a JMSG_MQTT topic plugin
2. Configure & verify a JMSG_UDP topic plugin
3. Add new topic plugin

See the JMSG_LIB documentation for more details.

============================================
1. Configure & Verify JMSG_MQTT Topic Plugin
============================================

After installing JMSG_LIB, JMSG_APP, MQTT_LIB, and JMSG_MQTT these
steps can be used to verify the installation. TPLUG_WEB_DISCRETE is
configured for MQTT-to-SB and TPLUG_WEB_RATE is configured for
SB-to-MQTT data flows. 

Note only one topic array entry can be enabled and configured as MQTT
with a publish sb-role.  This is because MQTT_LIB only supports one
MQTT topic subscription.


1. /cfs-basecamp/cfe-eds-framework/basecamp_defs/cpu1_jmsg_topics.json

Configure the TPLUG_WEB_* entries as follows:

   "topic-id-map": { 
      "TPLUG_WEB_DISCRETE_PLUGIN_TLM_TOPICID": "cfe-3",
      "TPLUG_WEB_RATE_PLUGIN_TLM_TOPICID": "cfe-4",
   }

   "topic": [   
      {
          "name":  "basecamp/demo/sc/discrete",
          "cfe-3": 0,
          "cfe": 0,
          "protocol": "mqtt",
          "sb-role": "pub",
          "enabled": "true"
      },
          
      {
          "name":  "basecamp/demo/sc/rate",
          "cfe-4": 0,
          "cfe": 0,
          "protocol": "mqtt",
          "sb-role": "sub",
          "enabled": "true"
      }
   ]

The cfe entries correspond to the following USR_TPLUGS:
cfe-3 = USR1
cfe-4 = USR2

2. Perform a 'make topicids' fill in the cfe topic ID values and install 
   the table into the cFS target
       
4. Start Basecamp, start the cFS, and open the USR_TPLUG WEB_DISCRETE and
   JMSG_MQTT Status telemetry pages 

3. Open the HiveMQ's websocket at https://www.hivemq.com/demos/websocket-client/?
   Using HiveMQ assumes Basecamps defaults have not been changed.

   A. Connect the MQTT broker and publish 
      Topic: basecamp/demo/sc/discrete  
      Message: {"integer":{"item-1": 1,"item-2": 2,"item-3": 3,"item-4": 4}}
   B. The USR_TPLUG WEB_DISCRETE telemetry page should be filled in and
      MSG_MQTT Status's ValidMqttMsgCnt should increment by 1
      

===========================================
2. Configure & Verify JMSG_UDP Topic Plugin
===========================================


==========================
3. Add a New Topic Plugins
==========================


adding an MQTT topic plugin. Topic plugins 
define functions for converting between MQTT messages and cFE SB messages.
- The MQTT_GW app is typically located in cfs-basecamp/usr/apps/
- [app] is your user app name. SC_SIM is commented out in MQTT files to
  serve as an example
- It is recommended to place app MQTT plugin in files in fsw/mqtt and include
  a file named mqtt_install.txt that explains how to install the app's plugin
  from the app's perspective
- In cfs-basecamp/cfe-eds-framework/basecamp_defs/cpu1_mqtt_gw_ini.json make
  sure the "MQTT_BROKER" configurations match your situation
  
  
#################################################
App plugin creation steps. See MQTT_GW app docs
for a more detailed explanation. SC_SIM provides
a working example that can serve as a reference.
#################################################

1. Create a fsw/mqtt subdirectory in your app's repo
2. For each topic create a header file that
   - Includes "mqtt_gw_topic_plugins.h"
   - Defines event IDs based on MQTT_GW_TOPIC_#_BASE_EID
   - Defines an object class type [APP]_MQTT_TOPIC_CMD_Class_t 
   - Defines a global constructor function
3. For each topic create a source file that defines
   - A cFE SB message to JSON message converter
   - A JSON message to cFE SB message converter
   - A test function
   
#################################################
App plugin creation steps. See MQTT_GW app docs
for a more detailed explanation
#################################################

1. Add the following lines to mqtt_gw/CMakeLists.txt.

   include_directories(${[app]_MISSION_DIR}/fsw/mqtt)
   aux_source_directory(${[app]_MISSION_DIR}/fsw/mqtt APP_SRC_FILES)


2. Update the following sections in mqtt_gw/fsw/topic_plugins/mqtt_gw_topic_plugins.c.
   Each constructor is added to an MQTT_GW_PluginTopic_# where # is the
   plugin identifier. 

   - In the "Include files" section add
   
     #include "[app_name]_mqtt_topic_[topic_name].h"

   - In "Global File Data" declare topic plugin data
     
     static [APP_NAME]_MQTT_TOPIC_[TOPIC_NAME]_Class_t  [AppName]Topic[TopicName];

   - In MQTT_GW_TOPIC_PLUGIN_Constructor() add a call to your app's plugin
     constructor in the plugin topic switch statement.
     
     [APP_NAME]_MQTT_TOPIC_[TOPIC_NAME]_Constructor(&[AppName]Topic[TopicName], &PluginFuncTbl[i],
                                                    CFE_SB_ValueToMsgId(TopicTbl->Topic[i].Cfe));

3. In your app's plugin header file [app_name]_mqtt_topic_[topic_name].h, ensure your
   MQTT_GW_TOPIC_PLUGIN_#_BASE_EID identfier # matches the ID used in step 1
   
4. Add your plugin to cfs-basecamp/cfe-eds-framework/basecamp_defs/cpu1_mqtt_gw_topics.json. This 
   file contains detailed instructions

    {
       "mqtt":  "basecamp/[app_name]/[topic_name]",
       "cfe-#": 0,
       "cfe": 0,
       "sb-role": "pub",
       "enabled": "false"
    }

KIT_TO packet filter table

 